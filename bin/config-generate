#!/usr/bin/env python
# Version: v.22.05.30
# -*- coding: utf-8 -*-
"""Generate Odoo server configuration from templates"""

import os
from dotenv import load_dotenv
from contextlib import closing
from string import Template

from waftlib import logger

SCRIPT_PATH = os.path.abspath(os.path.dirname(__file__))
os.environ['ODOO_WORK_DIR'] = os.path.realpath(os.path.join(SCRIPT_PATH, "../.."))
load_dotenv(os.path.join(os.environ["ODOO_WORK_DIR"], ".env-default"))
load_dotenv(os.path.join(os.environ["ODOO_WORK_DIR"], ".env-shared"), override=True)
load_dotenv(os.path.join(os.environ["ODOO_WORK_DIR"], ".env-secret"), override=True)

try:
    # Python 2, where io.StringIO fails because it is unicode-only
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    from configparser import RawConfigParser

    parser = RawConfigParser(strict=False)
except ImportError:
    # Python 2, where strict=True doesn't exist
    from ConfigParser import RawConfigParser

    parser = RawConfigParser()

ODOO_VERSION = os.environ.get("ODOO_VERSION")
odoo_auto_conf_path = os.path.join(os.environ["ODOO_WORK_DIR"], "auto/odoo.conf")
odoo_common_conf_d_path = os.path.join(os.environ["ODOO_WORK_DIR"], "common/conf.d")
odoo_custom_conf_d_path = os.path.join(os.environ["ODOO_WORK_DIR"], "custom/conf.d")
TARGET_FILE = os.environ.get("OPENERP_SERVER", odoo_auto_conf_path)
if ODOO_VERSION not in {"8.0", "9.0"}:
    TARGET_FILE = os.environ.get("ODOO_RC", TARGET_FILE)
CONFIG_DIRS = (odoo_common_conf_d_path, odoo_custom_conf_d_path)
CONFIG_FILES = []

# Read all configuraiton files found in those folders
logger.info("Merging found configuration files in %s", TARGET_FILE)
for dir_ in CONFIG_DIRS:
    try:
        for file_ in sorted(os.listdir(dir_)):
            parser.read(os.path.join(dir_, file_))
    except OSError:  # TODO Use FileNotFoundError when we drop python 2
        continue

# Write it to a memory string object
with closing(StringIO()) as resultfp:
    parser.write(resultfp)
    resultfp.seek(0)
    # Obtain the config string
    result = resultfp.read()
    # Expand environment variables found within
    result = Template(result).substitute(os.environ)
    logger.debug("Resulting configuration:\n%s", result)
    # Write it to destination
    with open(TARGET_FILE, "w") as targetfp:
        targetfp.write(result)
